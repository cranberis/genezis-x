
local M = {}

local preview_win = nil
local preview_buf = nil
local preview_scroll = 1 -- üìç —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
local debounce_timer = nil

-- üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–≤ –±–∞–π—Ç–∞—Ö)
local MAX_FILE_SIZE = 100 * 1024 -- 100 KB

-- üß† –ö—ç—à –¥–ª—è —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
local file_cache = {}

-- üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω—ã–º –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
local function is_binary(path)
  local ext = vim.fn.fnamemodify(path, ":e"):lower()

  -- üì¶ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  local unsupported_exts = {
    pdf = true,
    zip = true,
    tar = true,
    gz = true,
    rar = true,
    png = true,
    jpg = true,
    jpeg = true,
    svg = true,
    mp3 = true,
    mp4 = true,
    avi = true,
    mov = true,
    doc = true,
    docx = true,
    xls = true,
    xlsx = true,
    ppt = true,
    pptx = true,
    odt = true,
    ods = true,
  }

  if unsupported_exts[ext] then
    return true
  end

  -- üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
  local file = io.open(path, "rb")
  if not file then return true end
  local chunk = file:read(1024)
  file:close()
  if not chunk then return true end
  return chunk:find("\0") ~= nil
end

-- üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
local function close_preview()
  if preview_win and vim.api.nvim_win_is_valid(preview_win) then
    vim.api.nvim_win_close(preview_win, true)
    preview_win = nil
  end
  if preview_buf and vim.api.nvim_buf_is_valid(preview_buf) then
    vim.api.nvim_buf_delete(preview_buf, { force = true })
    preview_buf = nil
  end
end

-- üîΩ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
local function scroll_preview_down()
  if preview_buf and vim.api.nvim_buf_is_valid(preview_buf)
     and preview_win and vim.api.nvim_win_is_valid(preview_win) then
    local line_count = vim.api.nvim_buf_line_count(preview_buf)
    preview_scroll = math.min(preview_scroll + 1, line_count)
    vim.api.nvim_win_set_cursor(preview_win, { preview_scroll, 0 })
  end
end

-- üîº –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
local function scroll_preview_up()    
  if preview_buf and vim.api.nvim_buf_is_valid(preview_buf)
     and preview_win and vim.api.nvim_win_is_valid(preview_win) then
    preview_scroll = math.max(preview_scroll - 1, 1)
    vim.api.nvim_win_set_cursor(preview_win, { preview_scroll, 0 })
  end
end

-- üì¶ –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
local function open_preview(lines, filetype)
  close_preview()

  -- –°–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  preview_buf = vim.api.nvim_create_buf(false, true)
  vim.api.nvim_buf_set_lines(preview_buf, 0, -1, false, lines)

  if filetype then
    vim.api.nvim_buf_set_option(preview_buf, "filetype", filetype)
  end

  -- –ì–µ–æ–º–µ—Ç—Ä–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  local tree_width = require("nvim-tree.view").View.width
  local winheight = vim.fn.winheight(0) -- –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  local preview_width = vim.o.columns - tree_width - 2
  local preview_height = math.floor(winheight * 0.4)
  local preview_center = math.floor(preview_height / 2)

  -- –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ –æ–∫–Ω–µ
  local cursor_line = vim.fn.winline()

  -- –¢–æ—á–∫–∏ A, B, C ‚Äî –∫—É—Ä—Å–æ—Ä
  local A = 1
  local B = winheight
  local C = math.floor(winheight / 2)

  -- –¢–æ—á–∫–∏ a, b, c ‚Äî —Ü–µ–Ω—Ç—Ä –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  local a = A + 1
  local b = B - preview_height - 1
  local c = C - preview_center

  -- –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
  local delta_percent
  if cursor_line < C then
    delta_percent = (cursor_line - C) / (C - A)
  else
    delta_percent = (cursor_line - C) / (B - C)
  end

  -- –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  local delta_pixels
  if cursor_line < C then
    delta_pixels = delta_percent * (c - a)
  else
    delta_pixels = delta_percent * (b - c)
  end

  -- –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  local preview_row = math.floor(c + delta_pixels)
  preview_row = math.max(preview_row, 1)
  preview_row = math.min(preview_row, winheight - preview_height - 2)

  -- –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  preview_win = vim.api.nvim_open_win(preview_buf, false, {
    relative = "editor",
    width = preview_width,
    height = preview_height,
    row = preview_row,
    col = tree_width + 2,
    style = "minimal",
    border = "rounded",
    focusable = false,
    zindex = 50,
  })

  -- C–±—Ä–æ—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞    
  preview_scroll = (#lines > 1 and lines[1]:match("^üìÑ")) and 2 or 1
  vim.api.nvim_win_set_cursor(preview_win, { preview_scroll, 0 })
end

-- üìò Markdown: —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
local function format_markdown(lines)
  local formatted = {}
  for _, line in ipairs(lines) do
    if line:match("^#") then
      table.insert(formatted, "üîπ " .. line)
    elseif line:match("^%- ") or line:match("^%* ") then
      table.insert(formatted, "  ‚Ä¢ " .. line)
    else
      table.insert(formatted, line)
    end
  end
  return formatted
end

-- üßæ JSON: –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
local function format_json(raw)
  local ok, parsed = pcall(vim.fn.json_decode, table.concat(raw, "\n"))
  if not ok or type(parsed) ~= "table" then return raw end

  local pretty = vim.fn.json_encode(parsed)
  return vim.split(pretty, "\n", { plain = true })
end

-- üß† –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
local function preview_node()
  local api = require("nvim-tree.api")
  local node = api.tree.get_node_under_cursor()
  if not node or not node.absolute_path then
    close_preview()
    return
  end

  local path = node.absolute_path
  local lines = {}
  local filetype = nil

  if node.type == "directory" then
    -- üìÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
    lines = vim.fn.systemlist("ls -lha --group-directories-first " .. vim.fn.shellescape(path))
    if #lines == 0 then
      lines = { "üìÅ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞" }
    end

  elseif node.type == "file" then
    -- üìÑ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    local stat = vim.loop.fs_stat(path)

    -- üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω
    if file_cache[path] then
      lines = file_cache[path].lines
      filetype = file_cache[path].filetype
    else
      -- üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å
      if is_binary(path) then
        lines = {
          "‚ö†Ô∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
          "–§–∞–π–ª –±–∏–Ω–∞—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞",
        }
      else
        -- üßæ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        filetype = vim.filetype.match({ filename = path })

        -- üìÑ –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–≥ –∏ –æ–Ω –±–æ–ª—å—à–æ–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–≤–æ—Å—Ç
        if filetype == "log" and stat and stat.size > MAX_FILE_SIZE then
          local tail_cmd = "tail -c " .. MAX_FILE_SIZE .. " " .. vim.fn.shellescape(path)
          local output = vim.fn.systemlist(tail_cmd)
          lines = output
          table.insert(lines, 1, "üìÑ –ü–æ–∫–∞–∑–∞–Ω —Ö–≤–æ—Å—Ç –ª–æ–≥-—Ñ–∞–π–ª–∞ (" .. MAX_FILE_SIZE .. " –±–∞–π—Ç)")

        -- üìÑ –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π, –Ω–æ –Ω–µ –ª–æ–≥ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ
        elseif stat and stat.size > MAX_FILE_SIZE then
          local file = io.open(path, "rb")
          if file then
            local chunk = file:read(MAX_FILE_SIZE)
            file:close()
            if chunk then
              lines = vim.split(chunk, "\n", { plain = true })
              table.insert(lines, 1, "üìÑ –ü–æ–∫–∞–∑–∞–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ–∞–π–ª–∞ (" .. MAX_FILE_SIZE .. " –±–∞–π—Ç)")
            else
              lines = { "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞" }
            end
          else
            lines = { "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª" }
          end

        -- üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        else
          local ok, content = pcall(vim.fn.readfile, path)
          lines = ok and content or { "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª" }
        end

        -- üìò Markdown: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏
        if filetype == "markdown" then
          lines = format_markdown(lines)
        end

        -- üßæ JSON: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        if filetype == "json" then
          lines = format_json(lines)
        end

        -- üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        file_cache[path] = {
          lines = lines,
          filetype = filetype,
        }
      end
    end

  else
    lines = { "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞" }
  end

  open_preview(lines, filetype)
end

-- üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è nvim-tree
function M.setup_nvimtree_preview()
  -- üìå –ê–≤—Ç–æ–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
  vim.api.nvim_create_autocmd("CursorMoved", {
    pattern = "NvimTree*",
    callback = function()
      -- üïí –ó–∞–¥–µ—Ä–∂–∫–∞ (debounce) ‚Äî —á—Ç–æ–±—ã –Ω–µ –º–µ–ª—å—Ç–µ—à–∏–ª–æ
      if debounce_timer and not vim.loop.is_closing(debounce_timer) then
        debounce_timer:stop()
        debounce_timer:close()
      end

      debounce_timer = vim.defer_fn(function()
        preview_node()
      end, 150) -- –∑–∞–¥–µ—Ä–∂–∫–∞ 150 –º—Å
    end,
  })
  
  -- üéÆ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  vim.api.nvim_create_autocmd("FileType", {
    pattern = "NvimTree",
    callback = function(args)
      local opts = { noremap = true, silent = true, buffer = args.buf }
      vim.keymap.set("n", "<A-j>", scroll_preview_down, opts)
      vim.keymap.set("n", "<A-k>", scroll_preview_up, opts)
    end,
  })

  -- üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
  vim.api.nvim_create_autocmd({ "BufLeave", "WinLeave" }, {
    pattern = "NvimTree*",
    callback = function()
      close_preview()
    end,
  })
end

return M
